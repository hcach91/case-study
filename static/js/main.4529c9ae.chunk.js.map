{"version":3,"sources":["components/Table/index.module.scss","components/Counter/index.tsx","components/Table/constant.ts","components/Table/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","Counter","useState","counter","setCounter","className","onClick","ENDPOINT","Table","useForm","register","handleSubmit","reset","errors","formState","currentPage","setCurrentPage","totalPage","setTotalPage","employees","setEmployees","allowCreate","showCreatedForm","status","setStatusCreate","activeFirst","activeLast","totalItem","length","maxEachPage","fromIndex","toIndex","setStatus","setTimeout","undefined","updateEmployee","Math","ceil","useEffect","fetch","then","res","ok","json","classes","table","slice","map","id","name","email","position","colSpan","new","pagination","disabled","htmlFor","required","message","type","pattern","value","result","method","headers","body","JSON","stringify","newEmployee","catch","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4529c9ae.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"table\":\"Table_table__Z7VjQ\",\"new\":\"Table_new__2J3nl\",\"pagination\":\"Table_pagination__3Sg2v\"};","import React, { useState } from \"react\";\n\nexport function Counter() {\n  const [counter, setCounter] = useState<number>(0);\n  return (\n    <div className=\"p-3\">\n      <p>Counter: {counter}</p>\n      <button className=\"btn btn-primary mr-2\" onClick={() => setCounter(counter + 1)}>Increase (+1)</button>\n      <button className=\"btn btn-warning\" onClick={() => setCounter(0)}>Reset</button>\n    </div>\n  );\n}\n","export const ENDPOINT =\n  \"https://60c4be23ec8ef800175e0733.mockapi.io/case-study/employees\";\n\nexport const PAGE_SIZE = 5;\n","import { useEffect, useState } from \"react\";\nimport {\n  ChevronLeft,\n  ChevronRight,\n  ChevronDoubleLeft,\n  ChevronDoubleRight,\n  TextLeft,\n} from \"react-bootstrap-icons\";\nimport { useForm } from \"react-hook-form\";\n\nimport { PAGE_SIZE, ENDPOINT } from \"./constant\";\nimport classes from \"./index.module.scss\";\nimport { TableModal } from \"./modal\";\n\nexport function Table() {\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: { errors },\n  } = useForm<TableModal.Form>();\n\n  const [currentPage, setCurrentPage] = useState<number>(1);\n  const [totalPage, setTotalPage] = useState<number>(0);\n  const [employees, setEmployees] = useState<TableModal.Employee[]>([]);\n\n  const [allowCreate, showCreatedForm] = useState<boolean>(false);\n  const [status, setStatusCreate] = useState<TableModal.Status>();\n\n  const activeFirst = currentPage !== 1;\n  const activeLast = currentPage !== totalPage;\n\n  const totalItem = employees.length;\n  const rawMaxEachPage = currentPage * PAGE_SIZE;\n  const maxEachPage = !activeLast ? totalItem : rawMaxEachPage;\n\n  const fromIndex = (currentPage - 1) * PAGE_SIZE;\n  const toIndex = fromIndex + PAGE_SIZE;\n\n  useEffect(() => {\n    fetch(ENDPOINT)\n      .then((res) => (res.ok ? res.json() : []))\n      .then((employees: TableModal.Employee[]) => {\n        updateEmployee(employees);\n      });\n  }, []);\n\n  function setStatus(status: TableModal.Status) {\n    setStatusCreate(status);\n    setTimeout(() => setStatusCreate(undefined), 5000);\n  }\n\n  function updateEmployee(employees: TableModal.Employee[]) {\n    setEmployees(employees);\n    setTotalPage(Math.ceil(employees.length / PAGE_SIZE));\n  }\n\n  function onSubmit(result: TableModal.Form) {\n    setStatus(\"fetching\");\n    fetch(ENDPOINT, {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(result),\n    })\n      .then((res) => res.json())\n      .then((newEmployee: TableModal.Employee) => {\n        showCreatedForm(false);\n        updateEmployee([...employees, newEmployee]);\n        reset();\n        setStatus(\"success\");\n      })\n      .catch(() => setStatus(\"fail\"));\n  }\n\n  return (\n    <div className=\"p-3\">\n      <h2>Employees</h2>\n      <table className={classes.table}>\n        <thead>\n          <tr>\n            <th>Name</th>\n            <th>@ Email</th>\n            <th>\n              <TextLeft /> Position\n            </th>\n          </tr>\n        </thead>\n        <tbody>\n          {employees\n            .slice(fromIndex, toIndex)\n            .map(({ id, name, email, position }) => (\n              <tr key={id}>\n                <td>{name}</td>\n                <td>{email}</td>\n                <td>{position}</td>\n              </tr>\n            ))}\n          {!employees.length && (\n            <tr>\n              <td className=\"text-center\" colSpan={3}>\n                No data\n              </td>\n            </tr>\n          )}\n        </tbody>\n      </table>\n      <div className={classes.new} onClick={() => showCreatedForm(true)}>\n        + New\n      </div>\n      <div className={classes.pagination}>\n        <p className=\"m-0\">\n          {currentPage * PAGE_SIZE - PAGE_SIZE + 1} - {maxEachPage} of{\" \"}\n          {totalItem}\n        </p>\n        <button\n          className=\"btn first\"\n          onClick={() => setCurrentPage(1)}\n          disabled={!activeFirst}\n        >\n          <ChevronDoubleLeft />\n        </button>\n        <button\n          className=\"btn prev\"\n          onClick={() => setCurrentPage(currentPage - 1)}\n          disabled={!activeFirst}\n        >\n          <ChevronLeft />\n        </button>\n        <button\n          className=\"btn next\"\n          onClick={() => setCurrentPage(currentPage + 1)}\n          disabled={!activeLast}\n        >\n          <ChevronRight />\n        </button>\n        <button\n          className=\"btn last\"\n          onClick={() => setCurrentPage(totalPage)}\n          disabled={!activeLast}\n        >\n          <ChevronDoubleRight />\n        </button>\n      </div>\n      {allowCreate && (\n        <form className=\"form\">\n          <div className=\"form-group\">\n            <label htmlFor=\"name\">Name*</label>\n            <input\n              className=\"form-control\"\n              id=\"name\"\n              {...register(\"name\", { required: \"Please input name\" })}\n            />\n            {errors.name && (\n              <small className=\"form-text text-danger\">\n                {errors.name.message}\n              </small>\n            )}\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"email\">Email*</label>\n            <input\n              type=\"email\"\n              className=\"form-control\"\n              id=\"email\"\n              {...register(\"email\", {\n                required: \"Please input email\",\n                pattern: {\n                  value: /^\\w+@\\w+\\.\\w{2,4}$/i,\n                  message: \"Email not valid\",\n                },\n              })}\n            />\n            {errors.email && (\n              <small className=\"form-text text-danger\">\n                {errors.email.message}\n              </small>\n            )}\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"position\">Position*</label>\n            <input\n              className=\"form-control\"\n              id=\"position\"\n              {...register(\"position\", { required: \"Please input position\" })}\n            />\n            {errors.position && (\n              <small className=\"form-text text-danger\">\n                {errors.position.message}\n              </small>\n            )}\n          </div>\n          <div className=\"d-flex justify-content-center mb-3\">\n            <button\n              className=\"btn btn-primary\"\n              onClick={handleSubmit(onSubmit)}\n              disabled={status === \"fetching\"}\n            >\n              Create\n            </button>\n          </div>\n        </form>\n      )}\n      {status === \"success\" && (\n        <p className=\"alert alert-success text-center m-auto w-25 mb-3\">\n          Created sucessful!\n        </p>\n      )}\n      {status === \"fail\" && (\n        <p className=\"alert alert-danger text-center m-auto w-25\">\n          Created fail!\n        </p>\n      )}\n    </div>\n  );\n}\n","import {Counter, Table} from './components';\n\nexport default function App() {\n  return (\n    <>\n      <Counter />\n      <Table />\n    </>\n  );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}